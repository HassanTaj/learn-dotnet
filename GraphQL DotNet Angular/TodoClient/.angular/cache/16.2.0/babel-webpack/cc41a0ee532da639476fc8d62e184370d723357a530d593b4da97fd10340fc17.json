{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from '../utilities/globals/index.js';\nimport { equal } from '@wry/equality';\nimport { execute } from '../link/core/index.js';\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument } from '../utilities/index.js';\nimport { canonicalStringify } from '../cache/index.js';\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform } from '../utilities/index.js';\nimport { mergeIncrementalData } from '../utilities/common/incrementalResult.js';\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from '../errors/index.js';\nimport { ObservableQuery, logMissingFieldErrors } from './ObservableQuery.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { LocalState } from './LocalState.js';\nimport { QueryInfo, shouldWriteResult } from './QueryInfo.js';\nimport { PROTOCOL_ERRORS_SYMBOL } from '../errors/index.js';\nimport { print } from '../utilities/index.js';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n      link = _a.link,\n      defaultOptions = _a.defaultOptions,\n      documentTransform = _a.documentTransform,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      onBroadcast = _a.onBroadcast,\n      _c = _a.ssrMode,\n      ssrMode = _c === void 0 ? false : _c,\n      _d = _a.clientAwareness,\n      clientAwareness = _d === void 0 ? {} : _d,\n      localState = _a.localState,\n      _e = _a.assumeImmutableResults,\n      assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e;\n    var _this = this;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    var defaultDocumentTransform = new DocumentTransform(function (document) {\n      return _this.cache.transformDocument(document);\n    }, {\n      cache: false\n    });\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = assumeImmutableResults;\n    this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform).concat(defaultDocumentTransform) : defaultDocumentTransform;\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(newInvariantError(23));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueries = _a.updateQueries,\n      _d = _a.refetchQueries,\n      refetchQueries = _d === void 0 ? [] : _d,\n      _e = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _e === void 0 ? false : _e,\n      updateWithProxyFn = _a.update,\n      onQueryUpdated = _a.onQueryUpdated,\n      _f = _a.fetchPolicy,\n      fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n      _g = _a.errorPolicy,\n      errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n      keepRootFields = _a.keepRootFields,\n      context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, hasClientExports, mutationStoreValue, self;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            invariant(mutation, 24);\n            invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 25);\n            mutationId = this.generateMutationId();\n            mutation = this.cache.transformForLink(this.transform(mutation));\n            hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _h.sent();\n            _h.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  if (!('hasNext' in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: 'ROOT_MUTATION',\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== 'undefined') {\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: 'ROOT_MUTATION',\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          var update = mutation.update;\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n                if ('incremental' in result) {\n                  delete result.incremental;\n                }\n                if ('hasNext' in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        globalThis.__DEV__ !== false && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    return this.documentTransform.transformDocument(document);\n  };\n  QueryManager.prototype.getDocumentInfo = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var cacheEntry = {\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives(['nonreactive'], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument([{\n          name: 'client',\n          remove: true\n        }, {\n          name: 'connection'\n        }, {\n          name: 'nonreactive'\n        }], document),\n        defaultVars: getDefaultValues(getOperationDefinition(document)),\n        asQuery: __assign(__assign({}, document), {\n          definitions: document.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      transformCache.set(document, cacheEntry);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    var query = this.transform(options.query);\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    observable['lastQuery'] = query;\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    invariant(options.query, 26);\n    invariant(options.query.kind === 'Document', 27);\n    invariant(!options.returnPartialData, 28);\n    invariant(!options.pollInterval, 29);\n    return this.fetchQuery(queryId, __assign(__assign({}, options), {\n      query: this.transform(options.query)\n    })).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    this.cancelPendingFetches(newInvariantError(30));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 31 : 32, nameOrDoc);\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      errorPolicy = _a.errorPolicy,\n      variables = _a.variables,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b;\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        var hasErrors = graphQLResultHasError(result);\n        var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          var errors = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n          throw new ApolloError(errors);\n        }\n        return result;\n      });\n    };\n    if (this.getDocumentInfo(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var _b = this.getDocumentInfo(query),\n      serverQuery = _b.serverQuery,\n      clientQuery = _b.clientQuery;\n    if (serverQuery) {\n      var _c = this,\n        inFlightLinkObservables_1 = _c.inFlightLinkObservables,\n        link = _c.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var printedServerQuery_1 = print(serverQuery);\n        var byVariables_1 = inFlightLinkObservables_1.get(printedServerQuery_1) || new Map();\n        inFlightLinkObservables_1.set(printedServerQuery_1, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.beforeNext(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(printedServerQuery_1);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    var linkDocument = this.cache.transformForLink(options.query);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, networkStatus) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    var query = options.query;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (normalized.fetchPolicy !== \"standby\" && sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return sourcesWithInfo;\n    };\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast, containsDataFromLink;\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function (sourcesWithInfo) {\n        return sourcesWithInfo.sources;\n      }));\n      containsDataFromLink = true;\n    } else {\n      var sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return {\n      concast: concast,\n      fromLink: containsDataFromLink\n    };\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                result = oq.refetch();\n              }\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      if (errorPolicy === 'none' && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        query: query,\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return {\n              fromLink: false,\n              sources: [resultsFromCache(diff, queryInfo.markReady())]\n            };\n          }\n          if (returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())]\n        };\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"standby\":\n        return {\n          fromLink: false,\n          sources: []\n        };\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"names":["__assign","__awaiter","__generator","invariant","newInvariantError","equal","execute","hasDirectives","isExecutionPatchIncrementalResult","isExecutionPatchResult","removeDirectivesFromDocument","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","getGraphQLErrorsFromResult","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","DocumentTransform","mergeIncrementalData","ApolloError","isApolloError","graphQLResultHasProtocolErrors","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","PROTOCOL_ERRORS_SYMBOL","print","hasOwnProperty","Object","prototype","QueryManager","_a","cache","link","defaultOptions","documentTransform","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","_e","assumeImmutableResults","_this","queries","Map","fetchCancelFns","transformCache","WeakMap","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","defaultDocumentTransform","document","transformDocument","create","concat","mutationStore","stop","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","onQueryUpdated","_f","fetchPolicy","_g","errorPolicy","keepRootFields","context","mutationId","mutationStoreValue","self","_h","label","generateMutationId","transformForLink","transform","getDocumentInfo","getVariables","addExportedVariables","sent","loading","markMutationOptimistic","broadcastQueries","Promise","resolve","reject","getObservableFromLink","result","graphQLErrors","storeResult","errors","markMutationResult","removeOptimistic","subscribe","next","hasNext","err","networkError","cacheWrites","skipCache","push","data","dataId","query","incremental","diff","id","asQuery","optimistic","returnPartialData","mergedData","updateQueries_1","observableQuery","queryName","call","updater","get","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","isFinalResult","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","globalThis","__DEV__","fetchQuery","options","networkStatus","fetchConcastWithInfo","concast","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","cacheEntry","hasForcedResolvers","shouldForceResolvers","hasNonreactiveDirective","clientQuery","serverQuery","name","remove","defaultVars","definitions","map","def","kind","operation","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","reset","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","isArray","desc","add","oq","hasObservers","size","getQuery","setObservableQuery","included","nameOrDoc","warn","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","refetch","setDiff","startGraphQLSubscription","makeObservable","hasErrors","hasProtocolErrors","protocolErrors","extensions","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operationName","prepareContext","forceFetch","printedServerQuery_1","byVariables_1","varJson_1","beforeNext","of","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","requestId","lastRequestId","linkDocument","markError","markResult","markReady","aqr","ready","defaults","normalized","assign","fromVariables","sourcesWithInfo","fetchQueryByPolicy","sources","cleanupCancelFn","reason","setTimeout","containsDataFromLink","fromLink","includedQueriesById","lastDiff","getDiff","results","batch","onWatchUpdated","watch","watcher","indexOf","refetchWritePolicy","oldNetworkStatus","readCache","resultsFromCache","missing","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","shouldNotify","newContext"],"sources":["D:/Repos/learn-dotnet/GraphQL_Angular_Subscriptions_V7_6_0/TodoClient/node_modules/@apollo/client/core/QueryManager.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from '../utilities/globals/index.js';\nimport { equal } from '@wry/equality';\nimport { execute } from '../link/core/index.js';\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument, } from '../utilities/index.js';\nimport { canonicalStringify } from '../cache/index.js';\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform, } from '../utilities/index.js';\nimport { mergeIncrementalData } from '../utilities/common/incrementalResult.js';\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from '../errors/index.js';\nimport { ObservableQuery, logMissingFieldErrors } from './ObservableQuery.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { LocalState } from './LocalState.js';\nimport { QueryInfo, shouldWriteResult, } from './QueryInfo.js';\nimport { PROTOCOL_ERRORS_SYMBOL } from '../errors/index.js';\nimport { print } from '../utilities/index.js';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, documentTransform = _a.documentTransform, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, _e = _a.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e;\n        var _this = this;\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        var defaultDocumentTransform = new DocumentTransform(function (document) { return _this.cache.transformDocument(document); }, { cache: false });\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = assumeImmutableResults;\n        this.documentTransform = documentTransform\n            ? defaultDocumentTransform\n                .concat(documentTransform)\n                .concat(defaultDocumentTransform)\n            : defaultDocumentTransform;\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(newInvariantError(23));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, hasClientExports, mutationStoreValue, self;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        invariant(mutation, 24);\n                        invariant(fetchPolicy === 'network-only' ||\n                            fetchPolicy === 'no-cache', 25);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_h.sent());\n                        _h.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        if (optimisticResponse) {\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                        throw new ApolloError({\n                                            graphQLErrors: getGraphQLErrorsFromResult(result),\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === 'ignore' &&\n                                        graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: optimisticResponse ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        if (!('hasNext' in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            if (!isExecutionPatchIncrementalResult(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                });\n            }\n            if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true,\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = mergeIncrementalData(diff.result, result);\n                }\n                if (typeof mergedData !== 'undefined') {\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: 'ROOT_MUTATION',\n                        query: mutation.document,\n                        variables: mutation.variables,\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && getOperationName(document) || void 0,\n                            queryVariables: variables,\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            mutation.refetchQueries ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    var update = mutation.update;\n                    var isFinalResult = !isExecutionPatchResult(result) ||\n                        (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n                    if (update) {\n                        if (!skipCache) {\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                                if ('incremental' in result) {\n                                    delete result.incremental;\n                                }\n                                if ('hasNext' in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables,\n                            });\n                        }\n                    }\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: 'ROOT_MUTATION',\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                optimistic: false,\n                removeOptimistic: mutation.removeOptimistic,\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\"\n            ? optimisticResponse(mutation.variables)\n            : optimisticResponse;\n        return this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                globalThis.__DEV__ !== false && invariant.error(error);\n            }\n        }, mutation.mutationId);\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                hasClientExports: hasClientExports(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: hasDirectives(['nonreactive'], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: removeDirectivesFromDocument([\n                    { name: 'client', remove: true },\n                    { name: 'connection' },\n                    { name: 'nonreactive' },\n                ], document),\n                defaultVars: getDefaultValues(getOperationDefinition(document)),\n                asQuery: __assign(__assign({}, document), { definitions: document.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) })\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        var query = this.transform(options.query);\n        options = __assign(__assign({}, options), { variables: this.getVariables(query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        observable['lastQuery'] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        invariant(options.query, 26);\n        invariant(options.query.kind === 'Document', 27);\n        invariant(!options.returnPartialData, 28);\n        invariant(!options.pollInterval, 29);\n        return this.fetchQuery(queryId, __assign(__assign({}, options), { query: this.transform(options.query) })).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        this.cancelPendingFetches(newInvariantError(30));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 31 : 32, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" &&\n                    fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function (result) {\n                if (fetchPolicy !== 'no-cache') {\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = graphQLResultHasError(result);\n                var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    throw new ApolloError(errors);\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = print(serverQuery);\n                var byVariables_1 = inFlightLinkObservables_1.get(printedServerQuery_1) || new Map();\n                inFlightLinkObservables_1.set(printedServerQuery_1, byVariables_1);\n                var varJson_1 = canonicalStringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.beforeNext(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(printedServerQuery_1);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        var linkDocument = this.cache.transformForLink(options.query);\n        return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = getGraphQLErrorsFromResult(result);\n            var hasErrors = graphQLErrors.length > 0;\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = options.query;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (normalized.fetchPolicy !== \"standby\" &&\n                sourcesWithInfo.sources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast, containsDataFromLink;\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new Concast(this.localState\n                .addExportedVariables(normalized.query, normalized.variables, normalized.context)\n                .then(fromVariables).then(function (sourcesWithInfo) { return sourcesWithInfo.sources; }));\n            containsDataFromLink = true;\n        }\n        else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink,\n        };\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map;\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                optimistic: optimistic && removeOptimistic || false,\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo &&\n                        watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                result = oq.refetch();\n                            }\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset();\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(variables); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false &&\n                !returnPartialData &&\n                !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            if (errorPolicy === 'none' &&\n                networkStatus === NetworkStatus.refetch &&\n                Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 :\n            (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ? 1\n                : 2;\n        var resultsFromLink = function () { return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n            query: query,\n            variables: variables,\n            context: context,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n        }); };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return { fromLink: false, sources: [resultsFromCache(diff, queryInfo.markReady())] };\n                }\n                if (returnPartialData || shouldNotify) {\n                    return { fromLink: true, sources: [resultsFromCache(diff), resultsFromLink()] };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return { fromLink: true, sources: [resultsFromCache(diff), resultsFromLink()] };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-only\":\n                return { fromLink: false, sources: [resultsFromCache(readCache(), queryInfo.markReady())] };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return { fromLink: true, sources: [resultsFromCache(readCache()), resultsFromLink()] };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromCache(queryInfo.getDiff()),\n                            resultsFromLink(),\n                        ],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"standby\":\n                return { fromLink: false, sources: [] };\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}