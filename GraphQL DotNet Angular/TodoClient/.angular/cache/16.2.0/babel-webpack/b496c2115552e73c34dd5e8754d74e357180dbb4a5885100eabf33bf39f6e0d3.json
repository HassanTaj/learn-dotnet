{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { Cache } from \"./cache.js\";\nimport { Entry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport { bindContext, noContext, nonReactive, setTimeout, asyncFromGen } from \"./context.js\";\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep } from \"./dep.js\";\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nexport function defaultMakeCacheKey(...args) {\n  const trie = defaultKeyTrie || (defaultKeyTrie = new Trie(typeof WeakMap === \"function\"));\n  return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie };\nconst caches = new Set();\nexport function wrap(originalFunction, {\n  max = Math.pow(2, 16),\n  makeCacheKey = defaultMakeCacheKey,\n  keyArgs,\n  subscribe\n} = Object.create(null)) {\n  const cache = new Cache(max, entry => entry.dispose());\n  const optimistic = function () {\n    const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n    let entry = cache.get(key);\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n    const value = entry.recompute(Array.prototype.slice.call(arguments));\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n    caches.add(cache);\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n    return value;\n  };\n  Object.defineProperty(optimistic, \"size\", {\n    get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false\n  });\n  Object.freeze(optimistic.options = {\n    max,\n    makeCacheKey,\n    keyArgs,\n    subscribe\n  });\n  function dirtyKey(key) {\n    const entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments));\n  };\n  function peekKey(key) {\n    const entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments));\n  };\n  function forgetKey(key) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments));\n  };\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n  } : makeCacheKey;\n  return Object.freeze(optimistic);\n}","map":{"version":3,"names":["Trie","Cache","Entry","parentEntrySlot","bindContext","noContext","nonReactive","setTimeout","asyncFromGen","dep","defaultKeyTrie","defaultMakeCacheKey","args","trie","WeakMap","lookupArray","KeyTrie","caches","Set","wrap","originalFunction","max","Math","pow","makeCacheKey","keyArgs","subscribe","Object","create","cache","entry","dispose","optimistic","key","apply","arguments","get","set","forget","delete","value","recompute","Array","prototype","slice","call","add","hasValue","forEach","clean","clear","defineProperty","size","configurable","enumerable","freeze","options","dirtyKey","setDirty","dirty","peekKey","peek","forgetKey","getKey"],"sources":["D:/Repos/learn-dotnet/GraphQL_Angular_Subscriptions_V7_6_0/TodoClient/node_modules/optimism/lib/index.js"],"sourcesContent":["import { Trie } from \"@wry/trie\";\nimport { Cache } from \"./cache.js\";\nimport { Entry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport { bindContext, noContext, nonReactive, setTimeout, asyncFromGen, } from \"./context.js\";\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep } from \"./dep.js\";\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nexport function defaultMakeCacheKey(...args) {\n    const trie = defaultKeyTrie || (defaultKeyTrie = new Trie(typeof WeakMap === \"function\"));\n    return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie };\nconst caches = new Set();\nexport function wrap(originalFunction, { max = Math.pow(2, 16), makeCacheKey = defaultMakeCacheKey, keyArgs, subscribe, } = Object.create(null)) {\n    const cache = new Cache(max, entry => entry.dispose());\n    const optimistic = function () {\n        const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n        if (key === void 0) {\n            return originalFunction.apply(null, arguments);\n        }\n        let entry = cache.get(key);\n        if (!entry) {\n            cache.set(key, entry = new Entry(originalFunction));\n            entry.subscribe = subscribe;\n            // Give the Entry the ability to trigger cache.delete(key), even though\n            // the Entry itself does not know about key or cache.\n            entry.forget = () => cache.delete(key);\n        }\n        const value = entry.recompute(Array.prototype.slice.call(arguments));\n        // Move this entry to the front of the least-recently used queue,\n        // since we just finished computing its value.\n        cache.set(key, entry);\n        caches.add(cache);\n        // Clean up any excess entries in the cache, but only if there is no\n        // active parent entry, meaning we're not in the middle of a larger\n        // computation that might be flummoxed by the cleaning.\n        if (!parentEntrySlot.hasValue()) {\n            caches.forEach(cache => cache.clean());\n            caches.clear();\n        }\n        return value;\n    };\n    Object.defineProperty(optimistic, \"size\", {\n        get() {\n            return cache[\"map\"].size;\n        },\n        configurable: false,\n        enumerable: false,\n    });\n    Object.freeze(optimistic.options = {\n        max,\n        makeCacheKey,\n        keyArgs,\n        subscribe,\n    });\n    function dirtyKey(key) {\n        const entry = cache.get(key);\n        if (entry) {\n            entry.setDirty();\n        }\n    }\n    optimistic.dirtyKey = dirtyKey;\n    optimistic.dirty = function dirty() {\n        dirtyKey(makeCacheKey.apply(null, arguments));\n    };\n    function peekKey(key) {\n        const entry = cache.get(key);\n        if (entry) {\n            return entry.peek();\n        }\n    }\n    optimistic.peekKey = peekKey;\n    optimistic.peek = function peek() {\n        return peekKey(makeCacheKey.apply(null, arguments));\n    };\n    function forgetKey(key) {\n        return cache.delete(key);\n    }\n    optimistic.forgetKey = forgetKey;\n    optimistic.forget = function forget() {\n        return forgetKey(makeCacheKey.apply(null, arguments));\n    };\n    optimistic.makeCacheKey = makeCacheKey;\n    optimistic.getKey = keyArgs ? function getKey() {\n        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n    } : makeCacheKey;\n    return Object.freeze(optimistic);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}