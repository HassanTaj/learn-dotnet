{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from '../utilities/globals/index.js';\nimport { visit, BREAK, isSelectionNode } from 'graphql';\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude } from '../utilities/index.js';\nimport { cacheSlot } from '../cache/index.js';\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n      client = _a.client,\n      resolvers = _a.resolvers,\n      fragmentMatcher = _a.fragmentMatcher;\n    this.selectionsToResolveCache = new WeakMap();\n    this.cache = cache;\n    if (client) {\n      this.client = client;\n    }\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n      remoteResult = _a.remoteResult,\n      context = _a.context,\n      variables = _a.variables,\n      _b = _a.onlyRunForcedResolvers,\n      onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n        return [2, remoteResult];\n      });\n    });\n  };\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  };\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (context === void 0) {\n      context = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          selectionsToResolve: selectionsToResolve,\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        isClientFieldDescendant = false;\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n      var _this = this;\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                return [2];\n              }\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                invariant(fragment, 16, selection.name.value);\n              }\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n              return [2];\n            });\n          });\n        };\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n      var _this = this;\n      return __generator(this, function (_a) {\n        if (!rootValue) {\n          return [2, null];\n        }\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n            if (resolve) {\n              resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }]));\n            }\n          }\n        }\n        return [2, resultPromise.then(function (result) {\n          var _a, _b;\n          if (result === void 0) {\n            result = defaultResult;\n          }\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n          if (!field.selectionSet) {\n            return result;\n          }\n          if (result == null) {\n            return result;\n          }\n          var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) {\n            return d.name.value === 'client';\n          })) !== null && _b !== void 0 ? _b : false;\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n          }\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n    var _this = this;\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n      }\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n      }\n    }));\n  };\n  LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n    var isSingleASTNode = function (node) {\n      return !Array.isArray(node);\n    };\n    var selectionsToResolveCache = this.selectionsToResolveCache;\n    function collectByDefinition(definitionNode) {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        var matches_1 = new Set();\n        selectionsToResolveCache.set(definitionNode, matches_1);\n        visit(definitionNode, {\n          Directive: function (node, _, __, ___, ancestors) {\n            if (node.name.value === 'client') {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread: function (spread, _, __, ___, ancestors) {\n            var fragment = fragmentMap[spread.name.value];\n            invariant(fragment, 17, spread.name.value);\n            var fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n              matches_1.add(spread);\n              fragmentSelections.forEach(function (selection) {\n                matches_1.add(selection);\n              });\n            }\n          }\n        });\n      }\n      return selectionsToResolveCache.get(definitionNode);\n    }\n    return collectByDefinition(mainDefinition);\n  };\n  return LocalState;\n}();\nexport { LocalState };","map":{"version":3,"names":["__assign","__awaiter","__generator","invariant","visit","BREAK","isSelectionNode","argumentsObjectFromField","buildQueryFromSelectionSet","createFragmentMap","getFragmentDefinitions","getMainDefinition","hasDirectives","isField","isInlineFragment","mergeDeep","mergeDeepArray","removeClientSetsFromDocument","resultKeyNameFromField","shouldInclude","cacheSlot","LocalState","_a","cache","client","resolvers","fragmentMatcher","selectionsToResolveCache","WeakMap","addResolvers","setFragmentMatcher","prototype","_this","Array","isArray","forEach","resolverGroup","setResolvers","getResolvers","runResolvers","document","remoteResult","context","variables","_b","onlyRunForcedResolvers","_c","resolveDocument","data","then","localResult","result","getFragmentMatcher","clientQuery","serverQuery","prepareContext","getCacheKey","obj","identify","addExportedVariables","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","Directive","enter","node","name","value","arguments","some","arg","kind","diff","query","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","selectionsToResolve","definitionOperation","defaultOperationType","execContext","isClientFieldDescendant","collectSelectionsToResolve","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","has","resolveField","fieldResult","push","fragmentResult","Promise","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","resolve","__typename","withValue","directives","directive","isClientField","d","resolveSubSelectedArray","item","isSingleASTNode","collectByDefinition","definitionNode","matches_1","Set","set","_","__","___","ancestors","add","FragmentSpread","spread","fragmentSelections","size","get"],"sources":["D:/Repos/learn-dotnet/GraphQL_Angular_Subscriptions_V7_6_0/TodoClient/node_modules/@apollo/client/core/LocalState.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from '../utilities/globals/index.js';\nimport { visit, BREAK, isSelectionNode } from 'graphql';\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude, } from '../utilities/index.js';\nimport { cacheSlot } from '../cache/index.js';\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache, getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation\n                    ? definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache, client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                isClientFieldDescendant = false;\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                            return [2];\n                        }\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            invariant(fragment, 16, selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (!rootValue) {\n                    return [2, null];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                argumentsObjectFromField(field, variables),\n                                execContext.context,\n                                { field: field, fragmentMap: execContext.fragmentMap },\n                            ]));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        var _a, _b;\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) { return d.name.value === 'client'; })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n        var isSingleASTNode = function (node) { return !Array.isArray(node); };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                visit(definitionNode, {\n                    Directive: function (node, _, __, ___, ancestors) {\n                        if (node.name.value === 'client') {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function (spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        invariant(fragment, 17, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function (selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    }\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}());\nexport { LocalState };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,SAAS,QAAQ,+BAA+B;AACzD,SAASC,KAAK,EAAEC,KAAK,EAAEC,eAAe,QAAQ,SAAS;AACvD,SAASC,wBAAwB,EAAEC,0BAA0B,EAAEC,iBAAiB,EAAEC,sBAAsB,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,OAAO,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,cAAc,EAAEC,4BAA4B,EAAEC,sBAAsB,EAAEC,aAAa,QAAS,uBAAuB;AACrS,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,IAAIC,UAAU,GAAI,YAAY;EAC1B,SAASA,UAAUA,CAACC,EAAE,EAAE;IACpB,IAAIC,KAAK,GAAGD,EAAE,CAACC,KAAK;MAAEC,MAAM,GAAGF,EAAE,CAACE,MAAM;MAAEC,SAAS,GAAGH,EAAE,CAACG,SAAS;MAAEC,eAAe,GAAGJ,EAAE,CAACI,eAAe;IACxG,IAAI,CAACC,wBAAwB,GAAG,IAAIC,OAAO,CAAC,CAAC;IAC7C,IAAI,CAACL,KAAK,GAAGA,KAAK;IAClB,IAAIC,MAAM,EAAE;MACR,IAAI,CAACA,MAAM,GAAGA,MAAM;IACxB;IACA,IAAIC,SAAS,EAAE;MACX,IAAI,CAACI,YAAY,CAACJ,SAAS,CAAC;IAChC;IACA,IAAIC,eAAe,EAAE;MACjB,IAAI,CAACI,kBAAkB,CAACJ,eAAe,CAAC;IAC5C;EACJ;EACAL,UAAU,CAACU,SAAS,CAACF,YAAY,GAAG,UAAUJ,SAAS,EAAE;IACrD,IAAIO,KAAK,GAAG,IAAI;IAChB,IAAI,CAACP,SAAS,GAAG,IAAI,CAACA,SAAS,IAAI,CAAC,CAAC;IACrC,IAAIQ,KAAK,CAACC,OAAO,CAACT,SAAS,CAAC,EAAE;MAC1BA,SAAS,CAACU,OAAO,CAAC,UAAUC,aAAa,EAAE;QACvCJ,KAAK,CAACP,SAAS,GAAGV,SAAS,CAACiB,KAAK,CAACP,SAAS,EAAEW,aAAa,CAAC;MAC/D,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAACX,SAAS,GAAGV,SAAS,CAAC,IAAI,CAACU,SAAS,EAAEA,SAAS,CAAC;IACzD;EACJ,CAAC;EACDJ,UAAU,CAACU,SAAS,CAACM,YAAY,GAAG,UAAUZ,SAAS,EAAE;IACrD,IAAI,CAACA,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACI,YAAY,CAACJ,SAAS,CAAC;EAChC,CAAC;EACDJ,UAAU,CAACU,SAAS,CAACO,YAAY,GAAG,YAAY;IAC5C,OAAO,IAAI,CAACb,SAAS,IAAI,CAAC,CAAC;EAC/B,CAAC;EACDJ,UAAU,CAACU,SAAS,CAACQ,YAAY,GAAG,UAAUjB,EAAE,EAAE;IAC9C,IAAIkB,QAAQ,GAAGlB,EAAE,CAACkB,QAAQ;MAAEC,YAAY,GAAGnB,EAAE,CAACmB,YAAY;MAAEC,OAAO,GAAGpB,EAAE,CAACoB,OAAO;MAAEC,SAAS,GAAGrB,EAAE,CAACqB,SAAS;MAAEC,EAAE,GAAGtB,EAAE,CAACuB,sBAAsB;MAAEA,sBAAsB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;IAC/L,OAAO3C,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,OAAOC,WAAW,CAAC,IAAI,EAAE,UAAU4C,EAAE,EAAE;QACnC,IAAIN,QAAQ,EAAE;UACV,OAAO,CAAC,CAAC,EAAE,IAAI,CAACO,eAAe,CAACP,QAAQ,EAAEC,YAAY,CAACO,IAAI,EAAEN,OAAO,EAAEC,SAAS,EAAE,IAAI,CAACjB,eAAe,EAAEmB,sBAAsB,CAAC,CAACI,IAAI,CAAC,UAAUC,WAAW,EAAE;YAAE,OAAQlD,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEyC,YAAY,CAAC,EAAE;cAAEO,IAAI,EAAEE,WAAW,CAACC;YAAO,CAAC,CAAC;UAAG,CAAC,CAAC,CAAC;QACjP;QACA,OAAO,CAAC,CAAC,EAAEV,YAAY,CAAC;MAC5B,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDpB,UAAU,CAACU,SAAS,CAACD,kBAAkB,GAAG,UAAUJ,eAAe,EAAE;IACjE,IAAI,CAACA,eAAe,GAAGA,eAAe;EAC1C,CAAC;EACDL,UAAU,CAACU,SAAS,CAACqB,kBAAkB,GAAG,YAAY;IAClD,OAAO,IAAI,CAAC1B,eAAe;EAC/B,CAAC;EACDL,UAAU,CAACU,SAAS,CAACsB,WAAW,GAAG,UAAUb,QAAQ,EAAE;IACnD,IAAI5B,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE4B,QAAQ,CAAC,EAAE;MACrC,IAAI,IAAI,CAACf,SAAS,EAAE;QAChB,OAAOe,QAAQ;MACnB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACDnB,UAAU,CAACU,SAAS,CAACuB,WAAW,GAAG,UAAUd,QAAQ,EAAE;IACnD,OAAOvB,4BAA4B,CAACuB,QAAQ,CAAC;EACjD,CAAC;EACDnB,UAAU,CAACU,SAAS,CAACwB,cAAc,GAAG,UAAUb,OAAO,EAAE;IACrD,IAAInB,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,OAAOvB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE0C,OAAO,CAAC,EAAE;MAAEnB,KAAK,EAAEA,KAAK;MAAEiC,WAAW,EAAE,SAAAA,CAAUC,GAAG,EAAE;QAC3E,OAAOlC,KAAK,CAACmC,QAAQ,CAACD,GAAG,CAAC;MAC9B;IAAE,CAAC,CAAC;EACZ,CAAC;EACDpC,UAAU,CAACU,SAAS,CAAC4B,oBAAoB,GAAG,UAAUnB,QAAQ,EAAEG,SAAS,EAAED,OAAO,EAAE;IAChF,IAAIC,SAAS,KAAK,KAAK,CAAC,EAAE;MAAEA,SAAS,GAAG,CAAC,CAAC;IAAE;IAC5C,IAAID,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,CAAC,CAAC;IAAE;IACxC,OAAOzC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,OAAOC,WAAW,CAAC,IAAI,EAAE,UAAUoB,EAAE,EAAE;QACnC,IAAIkB,QAAQ,EAAE;UACV,OAAO,CAAC,CAAC,EAAE,IAAI,CAACO,eAAe,CAACP,QAAQ,EAAE,IAAI,CAACoB,uBAAuB,CAACpB,QAAQ,EAAEG,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAACY,cAAc,CAACb,OAAO,CAAC,EAAEC,SAAS,CAAC,CAACM,IAAI,CAAC,UAAUD,IAAI,EAAE;YAAE,OAAQhD,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE2C,SAAS,CAAC,EAAEK,IAAI,CAACa,iBAAiB,CAAC;UAAG,CAAC,CAAC,CAAC;QAC9O;QACA,OAAO,CAAC,CAAC,EAAE7D,QAAQ,CAAC,CAAC,CAAC,EAAE2C,SAAS,CAAC,CAAC;MACvC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDtB,UAAU,CAACU,SAAS,CAAC+B,oBAAoB,GAAG,UAAUtB,QAAQ,EAAE;IAC5D,IAAIuB,cAAc,GAAG,KAAK;IAC1B3D,KAAK,CAACoC,QAAQ,EAAE;MACZwB,SAAS,EAAE;QACPC,KAAK,EAAE,SAAAA,CAAUC,IAAI,EAAE;UACnB,IAAIA,IAAI,CAACC,IAAI,CAACC,KAAK,KAAK,QAAQ,IAAIF,IAAI,CAACG,SAAS,EAAE;YAChDN,cAAc,GAAGG,IAAI,CAACG,SAAS,CAACC,IAAI,CAAC,UAAUC,GAAG,EAAE;cAChD,OAAOA,GAAG,CAACJ,IAAI,CAACC,KAAK,KAAK,QAAQ,IAC9BG,GAAG,CAACH,KAAK,CAACI,IAAI,KAAK,cAAc,IACjCD,GAAG,CAACH,KAAK,CAACA,KAAK,KAAK,IAAI;YAChC,CAAC,CAAC;YACF,IAAIL,cAAc,EAAE;cAChB,OAAO1D,KAAK;YAChB;UACJ;QACJ;MACJ;IACJ,CAAC,CAAC;IACF,OAAO0D,cAAc;EACzB,CAAC;EACD1C,UAAU,CAACU,SAAS,CAAC6B,uBAAuB,GAAG,UAAUpB,QAAQ,EAAEG,SAAS,EAAE;IAC1E,OAAO,IAAI,CAACpB,KAAK,CAACkD,IAAI,CAAC;MACnBC,KAAK,EAAElE,0BAA0B,CAACgC,QAAQ,CAAC;MAC3CG,SAAS,EAAEA,SAAS;MACpBgC,iBAAiB,EAAE,IAAI;MACvBC,UAAU,EAAE;IAChB,CAAC,CAAC,CAACzB,MAAM;EACb,CAAC;EACD9B,UAAU,CAACU,SAAS,CAACgB,eAAe,GAAG,UAAUP,QAAQ,EAAEqC,SAAS,EAAEnC,OAAO,EAAEC,SAAS,EAAEjB,eAAe,EAAEmB,sBAAsB,EAAE;IAC/H,IAAIH,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,CAAC,CAAC;IAAE;IACxC,IAAIC,SAAS,KAAK,KAAK,CAAC,EAAE;MAAEA,SAAS,GAAG,CAAC,CAAC;IAAE;IAC5C,IAAIjB,eAAe,KAAK,KAAK,CAAC,EAAE;MAAEA,eAAe,GAAG,SAAAA,CAAA,EAAY;QAAE,OAAO,IAAI;MAAE,CAAC;IAAE;IAClF,IAAImB,sBAAsB,KAAK,KAAK,CAAC,EAAE;MAAEA,sBAAsB,GAAG,KAAK;IAAE;IACzE,OAAO5C,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI6E,cAAc,EAAEC,SAAS,EAAEC,WAAW,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAE7D,EAAE,EAAEC,KAAK,EAAEC,MAAM,EAAE4D,WAAW,EAAEC,uBAAuB;MACnK,OAAOnF,WAAW,CAAC,IAAI,EAAE,UAAU0C,EAAE,EAAE;QACnCkC,cAAc,GAAGnE,iBAAiB,CAAC6B,QAAQ,CAAC;QAC5CuC,SAAS,GAAGrE,sBAAsB,CAAC8B,QAAQ,CAAC;QAC5CwC,WAAW,GAAGvE,iBAAiB,CAACsE,SAAS,CAAC;QAC1CE,mBAAmB,GAAG,IAAI,CAACK,0BAA0B,CAACR,cAAc,EAAEE,WAAW,CAAC;QAClFE,mBAAmB,GAAGJ,cAAc,CAACS,SAAS;QAC9CJ,oBAAoB,GAAGD,mBAAmB,GACpCA,mBAAmB,CAACM,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GACzCP,mBAAmB,CAACQ,KAAK,CAAC,CAAC,CAAC,GAC9B,OAAO;QACbpE,EAAE,GAAG,IAAI,EAAEC,KAAK,GAAGD,EAAE,CAACC,KAAK,EAAEC,MAAM,GAAGF,EAAE,CAACE,MAAM;QAC/C4D,WAAW,GAAG;UACVJ,WAAW,EAAEA,WAAW;UACxBtC,OAAO,EAAE1C,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE0C,OAAO,CAAC,EAAE;YAAEnB,KAAK,EAAEA,KAAK;YAAEC,MAAM,EAAEA;UAAO,CAAC,CAAC;UAC1EmB,SAAS,EAAEA,SAAS;UACpBjB,eAAe,EAAEA,eAAe;UAChCyD,oBAAoB,EAAEA,oBAAoB;UAC1CtB,iBAAiB,EAAE,CAAC,CAAC;UACrBoB,mBAAmB,EAAEA,mBAAmB;UACxCpC,sBAAsB,EAAEA;QAC5B,CAAC;QACDwC,uBAAuB,GAAG,KAAK;QAC/B,OAAO,CAAC,CAAC,EAAE,IAAI,CAACM,mBAAmB,CAACb,cAAc,CAACc,YAAY,EAAEP,uBAAuB,EAAER,SAAS,EAAEO,WAAW,CAAC,CAACnC,IAAI,CAAC,UAAUE,MAAM,EAAE;UAAE,OAAQ;YAC3IA,MAAM,EAAEA,MAAM;YACdU,iBAAiB,EAAEuB,WAAW,CAACvB;UACnC,CAAC;QAAG,CAAC,CAAC,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDxC,UAAU,CAACU,SAAS,CAAC4D,mBAAmB,GAAG,UAAUC,YAAY,EAAEP,uBAAuB,EAAER,SAAS,EAAEO,WAAW,EAAE;IAChH,OAAOnF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI+E,WAAW,EAAEtC,OAAO,EAAEC,SAAS,EAAEkD,cAAc,EAAEC,OAAO;MAC5D,IAAI9D,KAAK,GAAG,IAAI;MAChB,OAAO9B,WAAW,CAAC,IAAI,EAAE,UAAUoB,EAAE,EAAE;QACnC0D,WAAW,GAAGI,WAAW,CAACJ,WAAW,EAAEtC,OAAO,GAAG0C,WAAW,CAAC1C,OAAO,EAAEC,SAAS,GAAGyC,WAAW,CAACzC,SAAS;QACvGkD,cAAc,GAAG,CAAChB,SAAS,CAAC;QAC5BiB,OAAO,GAAG,SAAAA,CAAUC,SAAS,EAAE;UAAE,OAAO9F,SAAS,CAAC+B,KAAK,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;YACjF,IAAIgE,QAAQ,EAAEC,aAAa;YAC3B,OAAO/F,WAAW,CAAC,IAAI,EAAE,UAAUoB,EAAE,EAAE;cACnC,IAAI,CAAC+D,uBAAuB,IAAI,CAACD,WAAW,CAACH,mBAAmB,CAACiB,GAAG,CAACH,SAAS,CAAC,EAAE;gBAC7E,OAAO,CAAC,CAAC,CAAC;cACd;cACA,IAAI,CAAC5E,aAAa,CAAC4E,SAAS,EAAEpD,SAAS,CAAC,EAAE;gBACtC,OAAO,CAAC,CAAC,CAAC;cACd;cACA,IAAI9B,OAAO,CAACkF,SAAS,CAAC,EAAE;gBACpB,OAAO,CAAC,CAAC,EAAE,IAAI,CAACI,YAAY,CAACJ,SAAS,EAAEV,uBAAuB,EAAER,SAAS,EAAEO,WAAW,CAAC,CAACnC,IAAI,CAAC,UAAUmD,WAAW,EAAE;kBAC7G,IAAI9E,EAAE;kBACN,IAAI,OAAO8E,WAAW,KAAK,WAAW,EAAE;oBACpCP,cAAc,CAACQ,IAAI,EAAE/E,EAAE,GAAG,CAAC,CAAC,EACxBA,EAAE,CAACJ,sBAAsB,CAAC6E,SAAS,CAAC,CAAC,GAAGK,WAAW,EACnD9E,EAAE,CAAC,CAAC;kBACZ;gBACJ,CAAC,CAAC,CAAC;cACX;cACA,IAAIR,gBAAgB,CAACiF,SAAS,CAAC,EAAE;gBAC7BC,QAAQ,GAAGD,SAAS;cACxB,CAAC,MACI;gBACDC,QAAQ,GAAGhB,WAAW,CAACe,SAAS,CAAC5B,IAAI,CAACC,KAAK,CAAC;gBAC5CjE,SAAS,CAAC6F,QAAQ,EAAE,EAAE,EAAED,SAAS,CAAC5B,IAAI,CAACC,KAAK,CAAC;cACjD;cACA,IAAI4B,QAAQ,IAAIA,QAAQ,CAACC,aAAa,EAAE;gBACpCA,aAAa,GAAGD,QAAQ,CAACC,aAAa,CAAC9B,IAAI,CAACC,KAAK;gBACjD,IAAIgB,WAAW,CAAC1D,eAAe,CAACmD,SAAS,EAAEoB,aAAa,EAAEvD,OAAO,CAAC,EAAE;kBAChE,OAAO,CAAC,CAAC,EAAE,IAAI,CAACiD,mBAAmB,CAACK,QAAQ,CAACJ,YAAY,EAAEP,uBAAuB,EAAER,SAAS,EAAEO,WAAW,CAAC,CAACnC,IAAI,CAAC,UAAUqD,cAAc,EAAE;oBACnIT,cAAc,CAACQ,IAAI,CAACC,cAAc,CAAC;kBACvC,CAAC,CAAC,CAAC;gBACX;cACJ;cACA,OAAO,CAAC,CAAC,CAAC;YACd,CAAC,CAAC;UACN,CAAC,CAAC;QAAE,CAAC;QACL,OAAO,CAAC,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACZ,YAAY,CAACa,UAAU,CAACC,GAAG,CAACZ,OAAO,CAAC,CAAC,CAAC7C,IAAI,CAAC,YAAY;UACtE,OAAOjC,cAAc,CAAC6E,cAAc,CAAC;QACzC,CAAC,CAAC,CAAC;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDxE,UAAU,CAACU,SAAS,CAACoE,YAAY,GAAG,UAAUQ,KAAK,EAAEtB,uBAAuB,EAAER,SAAS,EAAEO,WAAW,EAAE;IAClG,OAAOnF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI0C,SAAS,EAAEiE,SAAS,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,aAAa,EAAEC,aAAa,EAAEC,YAAY,EAAEC,WAAW,EAAEC,OAAO;MACvH,IAAInF,KAAK,GAAG,IAAI;MAChB,OAAO9B,WAAW,CAAC,IAAI,EAAE,UAAUoB,EAAE,EAAE;QACnC,IAAI,CAACuD,SAAS,EAAE;UACZ,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC;QACpB;QACAlC,SAAS,GAAGyC,WAAW,CAACzC,SAAS;QACjCiE,SAAS,GAAGD,KAAK,CAACxC,IAAI,CAACC,KAAK;QAC5ByC,gBAAgB,GAAG3F,sBAAsB,CAACyF,KAAK,CAAC;QAChDG,SAAS,GAAGF,SAAS,KAAKC,gBAAgB;QAC1CE,aAAa,GAAGlC,SAAS,CAACgC,gBAAgB,CAAC,IAAIhC,SAAS,CAAC+B,SAAS,CAAC;QACnEI,aAAa,GAAGT,OAAO,CAACY,OAAO,CAACJ,aAAa,CAAC;QAC9C,IAAI,CAAC3B,WAAW,CAACvC,sBAAsB,IACnC,IAAI,CAACiB,oBAAoB,CAAC6C,KAAK,CAAC,EAAE;UAClCM,YAAY,GAAGpC,SAAS,CAACuC,UAAU,IAAIhC,WAAW,CAACD,oBAAoB;UACvE+B,WAAW,GAAG,IAAI,CAACzF,SAAS,IAAI,IAAI,CAACA,SAAS,CAACwF,YAAY,CAAC;UAC5D,IAAIC,WAAW,EAAE;YACbC,OAAO,GAAGD,WAAW,CAACJ,SAAS,GAAGF,SAAS,GAAGC,gBAAgB,CAAC;YAC/D,IAAIM,OAAO,EAAE;cACTH,aAAa,GAAGT,OAAO,CAACY,OAAO,CAAC/F,SAAS,CAACiG,SAAS,CAAC,IAAI,CAAC9F,KAAK,EAAE4F,OAAO,EAAE,CACrEtC,SAAS,EACTtE,wBAAwB,CAACoG,KAAK,EAAEhE,SAAS,CAAC,EAC1CyC,WAAW,CAAC1C,OAAO,EACnB;gBAAEiE,KAAK,EAAEA,KAAK;gBAAE3B,WAAW,EAAEI,WAAW,CAACJ;cAAY,CAAC,CACzD,CAAC,CAAC;YACP;UACJ;QACJ;QACA,OAAO,CAAC,CAAC,EAAEgC,aAAa,CAAC/D,IAAI,CAAC,UAAUE,MAAM,EAAE;UACxC,IAAI7B,EAAE,EAAEsB,EAAE;UACV,IAAIO,MAAM,KAAK,KAAK,CAAC,EAAE;YAAEA,MAAM,GAAG4D,aAAa;UAAE;UACjD,IAAIJ,KAAK,CAACW,UAAU,EAAE;YAClBX,KAAK,CAACW,UAAU,CAACnF,OAAO,CAAC,UAAUoF,SAAS,EAAE;cAC1C,IAAIA,SAAS,CAACpD,IAAI,CAACC,KAAK,KAAK,QAAQ,IAAImD,SAAS,CAAClD,SAAS,EAAE;gBAC1DkD,SAAS,CAAClD,SAAS,CAAClC,OAAO,CAAC,UAAUoC,GAAG,EAAE;kBACvC,IAAIA,GAAG,CAACJ,IAAI,CAACC,KAAK,KAAK,IAAI,IAAIG,GAAG,CAACH,KAAK,CAACI,IAAI,KAAK,aAAa,EAAE;oBAC7DY,WAAW,CAACvB,iBAAiB,CAACU,GAAG,CAACH,KAAK,CAACA,KAAK,CAAC,GAAGjB,MAAM;kBAC3D;gBACJ,CAAC,CAAC;cACN;YACJ,CAAC,CAAC;UACN;UACA,IAAI,CAACwD,KAAK,CAACf,YAAY,EAAE;YACrB,OAAOzC,MAAM;UACjB;UACA,IAAIA,MAAM,IAAI,IAAI,EAAE;YAChB,OAAOA,MAAM;UACjB;UACA,IAAIqE,aAAa,GAAG,CAAC5E,EAAE,GAAG,CAACtB,EAAE,GAAGqF,KAAK,CAACW,UAAU,MAAM,IAAI,IAAIhG,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACgD,IAAI,CAAC,UAAUmD,CAAC,EAAE;YAAE,OAAOA,CAAC,CAACtD,IAAI,CAACC,KAAK,KAAK,QAAQ;UAAE,CAAC,CAAC,MAAM,IAAI,IAAIxB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,KAAK;UAC1L,IAAIX,KAAK,CAACC,OAAO,CAACiB,MAAM,CAAC,EAAE;YACvB,OAAOnB,KAAK,CAAC0F,uBAAuB,CAACf,KAAK,EAAEtB,uBAAuB,IAAImC,aAAa,EAAErE,MAAM,EAAEiC,WAAW,CAAC;UAC9G;UACA,IAAIuB,KAAK,CAACf,YAAY,EAAE;YACpB,OAAO5D,KAAK,CAAC2D,mBAAmB,CAACgB,KAAK,CAACf,YAAY,EAAEP,uBAAuB,IAAImC,aAAa,EAAErE,MAAM,EAAEiC,WAAW,CAAC;UACvH;QACJ,CAAC,CAAC,CAAC;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD/D,UAAU,CAACU,SAAS,CAAC2F,uBAAuB,GAAG,UAAUf,KAAK,EAAEtB,uBAAuB,EAAElC,MAAM,EAAEiC,WAAW,EAAE;IAC1G,IAAIpD,KAAK,GAAG,IAAI;IAChB,OAAOuE,OAAO,CAACC,GAAG,CAACrD,MAAM,CAACuD,GAAG,CAAC,UAAUiB,IAAI,EAAE;MAC1C,IAAIA,IAAI,KAAK,IAAI,EAAE;QACf,OAAO,IAAI;MACf;MACA,IAAI1F,KAAK,CAACC,OAAO,CAACyF,IAAI,CAAC,EAAE;QACrB,OAAO3F,KAAK,CAAC0F,uBAAuB,CAACf,KAAK,EAAEtB,uBAAuB,EAAEsC,IAAI,EAAEvC,WAAW,CAAC;MAC3F;MACA,IAAIuB,KAAK,CAACf,YAAY,EAAE;QACpB,OAAO5D,KAAK,CAAC2D,mBAAmB,CAACgB,KAAK,CAACf,YAAY,EAAEP,uBAAuB,EAAEsC,IAAI,EAAEvC,WAAW,CAAC;MACpG;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;EACD/D,UAAU,CAACU,SAAS,CAACuD,0BAA0B,GAAG,UAAUR,cAAc,EAAEE,WAAW,EAAE;IACrF,IAAI4C,eAAe,GAAG,SAAAA,CAAU1D,IAAI,EAAE;MAAE,OAAO,CAACjC,KAAK,CAACC,OAAO,CAACgC,IAAI,CAAC;IAAE,CAAC;IACtE,IAAIvC,wBAAwB,GAAG,IAAI,CAACA,wBAAwB;IAC5D,SAASkG,mBAAmBA,CAACC,cAAc,EAAE;MACzC,IAAI,CAACnG,wBAAwB,CAACuE,GAAG,CAAC4B,cAAc,CAAC,EAAE;QAC/C,IAAIC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;QACzBrG,wBAAwB,CAACsG,GAAG,CAACH,cAAc,EAAEC,SAAS,CAAC;QACvD3H,KAAK,CAAC0H,cAAc,EAAE;UAClB9D,SAAS,EAAE,SAAAA,CAAUE,IAAI,EAAEgE,CAAC,EAAEC,EAAE,EAAEC,GAAG,EAAEC,SAAS,EAAE;YAC9C,IAAInE,IAAI,CAACC,IAAI,CAACC,KAAK,KAAK,QAAQ,EAAE;cAC9BiE,SAAS,CAAClG,OAAO,CAAC,UAAU+B,IAAI,EAAE;gBAC9B,IAAI0D,eAAe,CAAC1D,IAAI,CAAC,IAAI5D,eAAe,CAAC4D,IAAI,CAAC,EAAE;kBAChD6D,SAAS,CAACO,GAAG,CAACpE,IAAI,CAAC;gBACvB;cACJ,CAAC,CAAC;YACN;UACJ,CAAC;UACDqE,cAAc,EAAE,SAAAA,CAAUC,MAAM,EAAEN,CAAC,EAAEC,EAAE,EAAEC,GAAG,EAAEC,SAAS,EAAE;YACrD,IAAIrC,QAAQ,GAAGhB,WAAW,CAACwD,MAAM,CAACrE,IAAI,CAACC,KAAK,CAAC;YAC7CjE,SAAS,CAAC6F,QAAQ,EAAE,EAAE,EAAEwC,MAAM,CAACrE,IAAI,CAACC,KAAK,CAAC;YAC1C,IAAIqE,kBAAkB,GAAGZ,mBAAmB,CAAC7B,QAAQ,CAAC;YACtD,IAAIyC,kBAAkB,CAACC,IAAI,GAAG,CAAC,EAAE;cAC7BL,SAAS,CAAClG,OAAO,CAAC,UAAU+B,IAAI,EAAE;gBAC9B,IAAI0D,eAAe,CAAC1D,IAAI,CAAC,IAAI5D,eAAe,CAAC4D,IAAI,CAAC,EAAE;kBAChD6D,SAAS,CAACO,GAAG,CAACpE,IAAI,CAAC;gBACvB;cACJ,CAAC,CAAC;cACF6D,SAAS,CAACO,GAAG,CAACE,MAAM,CAAC;cACrBC,kBAAkB,CAACtG,OAAO,CAAC,UAAU4D,SAAS,EAAE;gBAC5CgC,SAAS,CAACO,GAAG,CAACvC,SAAS,CAAC;cAC5B,CAAC,CAAC;YACN;UACJ;QACJ,CAAC,CAAC;MACN;MACA,OAAOpE,wBAAwB,CAACgH,GAAG,CAACb,cAAc,CAAC;IACvD;IACA,OAAOD,mBAAmB,CAAC/C,cAAc,CAAC;EAC9C,CAAC;EACD,OAAOzD,UAAU;AACrB,CAAC,CAAC,CAAE;AACJ,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}