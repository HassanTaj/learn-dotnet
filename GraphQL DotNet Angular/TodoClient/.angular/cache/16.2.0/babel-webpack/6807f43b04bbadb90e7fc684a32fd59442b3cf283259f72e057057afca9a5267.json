{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from '../../utilities/index.js';\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.assumeImmutableResults = false;\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n  ApolloCache.prototype.batch = function (options) {\n    var _this = this;\n    var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n    var updateResult;\n    this.performTransaction(function () {\n      return updateResult = options.update(_this);\n    }, optimisticId);\n    return updateResult;\n  };\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read(__assign(__assign({}, options), {\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic: optimistic\n    }));\n  };\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read(__assign(__assign({}, options), {\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic: optimistic\n    }));\n  };\n  ApolloCache.prototype.writeQuery = function (_a) {\n    var id = _a.id,\n      data = _a.data,\n      options = __rest(_a, [\"id\", \"data\"]);\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data\n    }));\n  };\n  ApolloCache.prototype.writeFragment = function (_a) {\n    var id = _a.id,\n      data = _a.data,\n      fragment = _a.fragment,\n      fragmentName = _a.fragmentName,\n      options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data\n    }));\n  };\n  ApolloCache.prototype.updateQuery = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readQuery(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n  ApolloCache.prototype.updateFragment = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readFragment(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n  return ApolloCache;\n}();\nexport { ApolloCache };","map":{"version":3,"names":["__assign","__rest","wrap","getFragmentQueryDocument","ApolloCache","assumeImmutableResults","getFragmentDoc","prototype","batch","options","_this","optimisticId","optimistic","updateResult","performTransaction","update","recordOptimisticTransaction","transaction","transformDocument","document","transformForLink","identify","object","gc","modify","readQuery","read","rootId","id","readFragment","query","fragment","fragmentName","writeQuery","_a","data","write","Object","assign","dataId","result","writeFragment","updateQuery","cache","value","updateFragment"],"sources":["D:/Repos/learn-dotnet/GraphQL_Angular_Subscriptions_V7_6_0/TodoClient/node_modules/@apollo/client/cache/core/cache.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { getFragmentQueryDocument, } from '../../utilities/index.js';\nvar ApolloCache = (function () {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        this.getFragmentDoc = wrap(getFragmentQueryDocument);\n    }\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic :\n            options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function () { return updateResult = options.update(_this); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || 'ROOT_QUERY', optimistic: optimistic }));\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || 'ROOT_QUERY',\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}