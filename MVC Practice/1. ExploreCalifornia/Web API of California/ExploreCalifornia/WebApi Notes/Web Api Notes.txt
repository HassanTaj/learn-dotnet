
/////////////////////////////////////////////////////////////////////////////////////////

        Web Api and REST (Representational State of Transfer ) Architecture
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
			Understanding REST
///////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
			Creating A Web API
///////////////////////////////////////////////////////////////////

We'll use the Code First solution from last excercise

1. right Click explorecalifornia solution and add a
   new Application/project so it can be maintained,updated n deployed sperately if nedded.
	we will be able to share some components between the two applications though. (we can also add web api controller to the same project if you like).

2. we won't make any views here but its usefull to have an index page that documents all the operations we have in the api , or maybe some help pages
3. under controllers we have a homeController and a Values Controller 
   the values controler is just a template that shows us how to build a RESTful api
	ValuesController inherits from ApiController rather than Controller

4. Making a change to this aplication under modles
	we already have a COntext and Tour class so instead of Recreating them 
	we'll move them to a seperate project where they can be shared between both our applications
	you can think it as moving them to a single shared DLL.
5. Right Click solution  add ClassLiberary 
   add refferance of that liberary to your both projects
   here i'm naming it ExploreCalifornia.DAL(Data Access Layer).
   Delete the autoGenerated Class 1 we don't need that.
6. if you get some errors in DAL project in dbcontext class or tour class just update your EntityFramework from NugetPkgMgr

7. Change the name of Db to a connection string in DBContext class, get the context from serverExplorere
   Db properties under connection and then Connection string.
   we're doing this so the api doesn't create a new database but uses the already created one.

   A clear and more Flexable way to do this would be storing a connection string in Web.Config file for each Application

   but the thing we're doing here is nice for quick demo

8. Righclick the solution and build the whole thing now.. 
	to make sure our solution compiles but you'll get some errors of missing namespaces and Refferances

9. Add refferances of your ClassLib to both projects the California and the APi
   (well i knew i had to do it but was following the flow of tutorial to see what errors come)
   and Build Again.

10. Go back to APi project and
    add a Scafolded item this time and then 
    add a WebApi controller with actions using EFramework for Managing Tours
	we'll call it  TourController cause there won't be any conflicts cause
	we're in a different project.
	This will give us some nice scaffolding with alot of useful actions for 
	managing my restful APi
   
   And if you get some error in the controler make sure you're using latest shit of EFramework and manageNugetPkgs

11. we'll get some HTTP request in comments
    so lets test it in a thing called fiddler (used to compose some custom Http requests and examin responses)
    
	a. Start the Api in ISS express (rightClick API and set a start up project)
	b. Ctrl+ F5 nigga
	c. Coppy the URL  so you know where you'll be directing your requests
	d. Paste it in Fiddler's composer tab http://localhost:41756/api/tour or http://localhost:41756/Help/api/Tour if the first one doesn't workand click execute

12. doing a GET Request  
		you'll get a jason response from the db and if you don't well its 
		proably cause you might've fucked up during following the instructions .

		if your working ok 
    you'll get a JSON response or JSON(java object notation) string
	   to get xml  
	   write Accept: application/xml
13. make POST Request 
    add Content-type: application/json

{"Name":"Put Method Thing","Discription":"Method PUT ","Length":2,"Price":780.00,"Rating":"Easy","IncludesMeals":false}

14. make PUT request
http://localhost:44704/api/tour/6 // also have to put the id after the tour
{"Id":6,"Name":"Put Method Thing Updated now","Discription":"Method PUT executed","Length":2,"Price":780.00,"Rating":"Easy","IncludesMeals":false}
//////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
			Consuming A Web Api
///////////////////////////////////////////////////////////////////

Now lets make Calls to an Api from a Clint that were are familear with 

 > well use a web form to test a JQ,Ajax call and also a C# server side call
  
1. Add the Web form to Api Project to keep things simple for now
2. Name it anything , i'm nming it APi client.
3. Add a Title in it .
4. Add id to the div for dynamicly adding values in it

5. add jq lib and to get all the tours we will use
   //$.getJSON('path to api') its the shortcut for ajax method when used with GetRequest method and Json data type 

   entire function ::: 
   --------------------------------------------------
       <script src="Scripts/jquery-1.10.2.min.js"></script>
    <script>
        $(function () {
             //        path to api. when done (entire respons that we get back)
            $.getJSON('/api/tour').done(function (data) {
             
                $('#tours').append('<h2>It\'s just a quick demo</h2>');
                //itterate through the collection of data 
                // each(collection, function(index , element))
                $.each(data, function (index, tour) {
                   // to itterate all properties of a tour
                    for (prop in tour) {
                        $('#tours').append(prop + ':' + tour[prop] + '<br/>');
                    }
                    $('#tours').append('<br/>');
                });
            });
        });
    </script>
	----------------------------------------------------

6. now its time for Server side code (code behind)
   From form to goto code behind press F7
  a. create an instane of HTTPCLient
  b. set the base address of the client and that will be specified as an instance of 
     new URI("http://host:portnumber");
  c. create  new instance of tour and give it some values
  d. call PostAsJasonAsyncmethod("api/tour",tour); of client

              //var client = new HttpClient();
            //client.BaseAddress = new Uri("http://localhost:44704");

            //var tour = new Tour() {Name="Added by Server side Code",Discription="Using HTTPClient",
            //    Length =10,IncludesMeals=false,Price= 3,Rating="Easy"};
            //client.PostAsJsonAsync("api/tour", tour);
  e. in the same way we can do is use GET,PUT and DELETE methods too
///////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////