{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from '../utilities/index.js';\nimport { reobserveCacheFirst } from './ObservableQuery.js';\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from '../utilities/index.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\nvar QueryInfo = function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n    this.queryId = queryId;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.stopped = false;\n    this.dirty = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n    return this;\n  };\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  };\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var options = this.getDiffOptions(variables);\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n    this.updateWatch(this.variables = variables);\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n    if (oq === this.observableQuery) return;\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n    this.observableQuery = oq;\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        var diff = _this.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n    cancelNotifyTimeout(this);\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n    this.dirty = false;\n  };\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n    return true;\n  };\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      this.cancel = QueryInfo.prototype.cancel;\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n  QueryInfo.prototype.cancel = function () {};\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function (diff) {\n        return _this.setDiff(diff);\n      }\n    });\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n  QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n    var _this = this;\n    var merger = new DeepMerger();\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    this.reset();\n    if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n      var mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n    } else if ('hasNext' in result && result.hasNext) {\n      var diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n    this.graphQLErrors = graphQLErrors;\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n          }\n          var diffOptions = _this.getDiffOptions(options.variables);\n          var diff = cache.diff(diffOptions);\n          if (!_this.stopped) {\n            _this.updateWatch(options.variables);\n          }\n          _this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n    return error;\n  };\n  return QueryInfo;\n}();\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}","map":{"version":3,"names":["__assign","equal","DeepMerger","mergeIncrementalData","reobserveCacheFirst","isNonEmptyArray","graphQLResultHasError","canUseWeakMap","NetworkStatus","isNetworkRequestInFlight","destructiveMethodCounts","WeakMap","Map","wrapDestructiveCacheMethod","cache","methodName","original","set","get","apply","arguments","cancelNotifyTimeout","info","clearTimeout","QueryInfo","queryManager","queryId","generateQueryId","listeners","Set","document","lastRequestId","subscriptions","stopped","dirty","observableQuery","has","prototype","init","query","networkStatus","loading","variables","setVariables","lastDiff","Object","assign","networkError","graphQLErrors","setObservableQuery","reset","getDiff","options","getDiffOptions","diff","updateWatch","oq","fetchPolicy","complete","updateLastDiff","_a","returnPartialData","optimistic","canonizeResults","setDiff","_this","oldDiff","result","notifyTimeout","setTimeout","notify","oqListener","delete","add","fromOptimisticTransaction","shouldNotify","forEach","listener","size","stop","cancel","sub","unsubscribe","stopPolling","watchOptions","watcher","callback","lastWatch","watch","resetLastWrite","lastWrite","shouldWrite","dmCount","data","markResult","cacheWriteBehavior","merger","errors","slice","incremental","mergedData","hasNext","merge","shouldWriteResult","errorPolicy","performTransaction","writeQuery","overwrite","diffOptions","markReady","ready","markError","error","ignoreErrors","writeWithErrors"],"sources":["D:/Repos/learn-dotnet/GraphQL_Angular_Subscriptions_V7_6_0/TodoClient/node_modules/@apollo/client/core/QueryInfo.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from '../utilities/index.js';\nimport { reobserveCacheFirst } from './ObservableQuery.js';\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap, } from '../utilities/index.js';\nimport { NetworkStatus, isNetworkRequestInFlight, } from './networkStatus.js';\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\nvar QueryInfo = (function () {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.subscriptions = new Set();\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        if (!equal(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function () {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.getDiff = function (variables) {\n        if (variables === void 0) { variables = this.variables; }\n        var options = this.getDiffOptions(variables);\n        if (this.lastDiff && equal(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables = variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return { complete: false };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function (diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions(),\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function (variables) {\n        var _a;\n        if (variables === void 0) { variables = this.variables; }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,\n        };\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        this.updateLastDiff(diff);\n        if (!this.dirty &&\n            !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function () {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    oq[\"observe\"]();\n                }\n                else {\n                    reobserveCacheFirst(oq);\n                }\n            });\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) &&\n            this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" &&\n                fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        if (!this.stopped) {\n            this.stopped = true;\n            this.reset();\n            this.cancel();\n            this.cancel = QueryInfo.prototype.cancel;\n            this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n            var oq = this.observableQuery;\n            if (oq)\n                oq.stopPolling();\n        }\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });\n        if (!this.lastWatch ||\n            !equal(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function () {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal(variables, lastWrite.variables) &&\n            equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        var merger = new DeepMerger();\n        var graphQLErrors = isNonEmptyArray(result.errors)\n            ? result.errors.slice(0)\n            : [];\n        this.reset();\n        if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n            var mergedData = mergeIncrementalData(this.getDiff().result, result);\n            result.data = mergedData;\n        }\n        else if ('hasNext' in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === 'no-cache') {\n            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));\n        }\n        else if (cacheWriteBehavior !== 0) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1,\n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        if (_this.lastDiff &&\n                            _this.lastDiff.diff.complete) {\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    if (!_this.stopped) {\n                        _this.updateWatch(options.variables);\n                    }\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return this.networkStatus = NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" ||\n        errorPolicy === \"all\";\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}