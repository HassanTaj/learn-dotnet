////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//			 Uisng Models in Views and Actions
//////////////////////////////////////////////////////////////

> simple tutorial for making a model.cs class and then auto generating a controller
  with read/write actions

      
			// returns HTML containing the Name of the Property
            @Html.DisplayNameFor(model => model.AccountNumber)
     

			// returns HTML containing the Value of the Property
            @Html.DisplayFor(model => model.AccountNumber)

			// returns a link text
		    @Url.Action("action","controler");

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//       Displaying and Validating Model Properties
//////////////////////////////////////////////////////////////

> Use data annotations in the modle to decorate it  to make text look different in views
	e.g.

        [Required]
        //[StringLength(10,MinimumLength =6)]
        [RegularExpression(@"\d{6,10}",ErrorMessage ="Account # must be between 6 and 10")]
        [Display(Name ="Account Number # ")]
        public string AccountNumber { get; set; }

        [Display(Name = "First Name")]
        public string FirstName { get; set; }

        [Display(Name = "Last Name")]
        public string LastName { get; set; }
 
        [Display(Name = "Balance  ")]
        [DataType(DataType.Currency)]
        public decimal Balance { get; set; }

///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//       Using View Models
//////////////////////////////////////////////////////////////

> A view model is different than a tipical model

 we've made a model already  so if you look at the CheckingAccount.cs Model
 and we can use this modle across multiple pages to display property values of an instance of the model 
 or to build a form with fields that corospond to each property very soon we'll be presisting instances of this class
 in a table in a database  properties of each object instance will corrospond to columns in that table

> if you've noticed we got the register and login links in out nav bar 

the regester page shows us a form with eamil, pass and cnfPass.
lets take a look at regersterviewmodel
in Views/Account/RegisterViewModel.cshtml

if you look at the topon the model decleration you'll find there is no account model or register model 
but there is a Reigister view model 

the RegesterViewModel is a model that we use exclusively to deal with the registeration form
and not a one that will be presisted to database 
> right click the RegisterViewModel and to defenition
  we see that this is definedin side the  AccountViewModesl file
  this file contains several vew models that arerelated to  user account Functions.
  The RegisterViewModel contains
  email,pass,confpass properties

  confpass is an example of a property that would be never saved in the database
  making it more appropreate for a view model instead of a basic model

  The LoginViewModel is made of 
  Email,pass,remember me (to enable cookie based login)

  now go to the Account Controller inside the RegisterMethod
  the one that processes the form 

 > you can see that user record that would be created 
   is not based on the RegisterViewModel but instead another Class 
   called AplicationUser which has the email from the View Model 
   assigned to its username Property then that along with the password from the viewModel
   would have to be hashed before sotred in database

   the only parameter to this method is an instance of 
   RefisterViewModel 

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//       Generating Database Objects with EntityFramework
//////////////////////////////////////////////////////////////

> take a look at ORM(Object Relational maping)
> Go to AccountController there is an ApplicationUser
> Go to ApplicationUser class in IdentityModels.cs

    Application user inherits from IdentityUser, IdentityUser is the model that is going to be stroed inthe database
	it contains properties like userName,passhash,and we can add additional that we wanna stroe in this inheriting class 
	in this file we also have a class ApplicationDbContext which inherits from IdentityDbContext which internally inherits from DbContext
	the dbContext will serve as the object layer we'll use to compunicate with the database
	by inheriting from identityDbContex this will already give us properties like this.users,this.roles
	and we can use them directly with the user data  in our database

	the string "DefailtConnectio" that's passed to its constructor reffers to a connection string in web.config
	that will be used to connect to a database or to create a database if it doesn't already exist
	
	in web.config file under connection strings
	the DataDirectory Token refferst ot app_data folder of our project

	in IdentityModels
	   we add a 
	   DbSet<CheckingAccount> // this will allow us to work directly with the checking account table
    in CheckingAccount 
	   we add an other Property that will be a refferance to the user that holds this Account 
	   this will be automaticly implemented  with a foregin key that refferances the user table when 
	   our database is generated

	   making it a virtual property allows it to be overriden by the framework with a mechanism 
	   that supports lazy loading of this related object
	   so we can assign a user object to this property and have that be updated in the database

	   but it might be a lot more convineant in some scenerios to just assign a user id
	   so we'll also add following
	   pub str appuserid{get;set;}
	   
> back in account conroller 
 if the creation of user succedes we can set the user user up with a new checking account 
 we'll create a new instance of applicationdbcontext  and a checkingaccount
  copy the frist name and last name from the register view model and account number
  we'll hardcode fro now balance sould be 0 for new accounts
  and we'll asign user.id for new user id to application user id 
  the we just need to add the checking account 
  db.add();
  db.savechanges();

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//       Entity Framework Code First Migrations
//////////////////////////////////////////////////////////////

> How to update the Database Scheema so it can stay in sync with our modle classes
  using Entityframework Code First Migrations

  so in order to change datbase scheema we have two ways either 
  > change the schema in the SSMS
  > or go back to the model and use dataAnnotations for the reason
	i'll do it in the checkingAccount Model.
	namespace
	using System.ComponentModel.DataAnnotations.Schema;
	[column(TypeName="varchar")]

	try to run it now f5 or Ctrl+F5
	Tadaaaa it won't run 
	cuase well EntityFramework can create DB but won't update the shceema 
	but it does suggest ef migrations how will we do that ?

	open Nuget Manager Console
	type 
	Enalble-Migrations -ContextType ApplicationDbContext
	enable-migrations -contexttype ApplicationDbContext
	either work

	a folder called Migrations will be generated
	and also a row will be added to the migration history table in our database

	we can use automatic migrations or manual migrations 
	main purpose is to push the changes to the db 
	but automatic migrations are alot more convineant during developement stages
	when our models are frequently changing

> do Migrations Manually
 
 we need to push the changes to our database
 first Add a migration 

	Add-Migration WhatEverTheFUCKMigrations

	 in the migration file 
	 the public Override void Up(){...}// method is used to apply the changes
		  and 
	 the public Override void Down(){...}// method is used to Rollback the changes

> we can also create a SQL Script if necessary
	for example if we need to manually apply these changes on a different server
	to do that we wil use  the 

	'Update-Database -Script'  command with script flag
	and you'll see something like 
	// some sql script

	ALTER TABLE [dbo].[CheckingAccounts] ALTER COLUMN [AccountNumber] [varchar](10) NOT NULL
	INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
	VALUES (N'201612251101410_AccountNumberChanges', N'ATMEntryPoint.Models.ApplicationDbContext',  0x

	but if you don't want to do that we can use 

	'Update-Database -Verbose'  command with verbose flag
	so we can see actually what its doing

		> Its also Possible to roll back to a previous state using the Target migration switch
		 with the name of a specific migration

		  eg
			 Update-Database -TargetMigration InitialCreate

		> now lets change the account number 


> For Enabling Automatic Migrations
  open Configuration.cs file
  and set AutomaticMigrationsEnabled to true

  now lets make a change to checking account again 
  the applicationuserid property was made as a nullable column
   if we don't wanna allow nulls there
   we'll add a required attribute

   and with automatic migrations enabled 
    we'll only have to give one command

	update-database or update-database -verbose if you wanna see whats going on

	but the enetity framework will be worried about data loss with automatic migrations
	so we give it force flag 

	then use update-database -force
//////////////////////////////////////////////////////////////////////////////