{"ast":null,"code":"var _class;\nimport { APOLLO_OPTIONS, ApolloModule } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\nimport { InMemoryCache, split } from '@apollo/client/core';\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { createClient } from \"graphql-ws\";\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport * as i0 from \"@angular/core\";\nconst _defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'ignore'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n};\nconst Host = 'localhost:44354/todos/graphql';\nconst uri = 'https://localhost:44354/todos/graphql'; // <-- add the URL of the GraphQL server here\nexport function createApollo(httpLink) {\n  // Create an http link:\n  const http = httpLink.create({\n    uri: `https://${Host}`\n  });\n  // Create a WebSocket link:\n  const ws = new GraphQLWsLink(createClient({\n    url: `wss://${Host}`\n  }));\n  // using the ability to split links, you can send data to each link\n  // depending on what kind of operation is being sent\n  const link = split(\n  // split based on operation type\n  ({\n    query\n  }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  }, ws, http);\n  return {\n    link,\n    cache: new InMemoryCache(),\n    defaultOptions: _defaultOptions\n  };\n}\nexport class GraphQLModule {}\n_class = GraphQLModule;\n_class.ɵfac = function GraphQLModule_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: _class\n});\n_class.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  providers: [{\n    provide: APOLLO_OPTIONS,\n    useFactory: createApollo,\n    deps: [HttpLink]\n  }],\n  imports: [ApolloModule]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(GraphQLModule, {\n    exports: [ApolloModule]\n  });\n})();","map":{"version":3,"names":["APOLLO_OPTIONS","ApolloModule","HttpLink","InMemoryCache","split","GraphQLWsLink","createClient","getMainDefinition","_defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","Host","uri","createApollo","httpLink","http","create","ws","url","link","definition","kind","operation","cache","defaultOptions","GraphQLModule","provide","useFactory","deps","imports","exports"],"sources":["D:\\Repos\\learn-dotnet\\GraphQL_Angular_Subscriptions_V7_6_0\\TodoClient\\src\\app\\graphql.module.ts"],"sourcesContent":["import { APOLLO_OPTIONS, ApolloModule } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\nimport { NgModule } from '@angular/core';\nimport { ApolloClientOptions, DefaultOptions, InMemoryCache, split } from '@apollo/client/core';\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { createClient } from \"graphql-ws\";\nimport { getMainDefinition } from '@apollo/client/utilities';\n\nconst _defaultOptions: DefaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'ignore',\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n}\n\nconst Host = 'localhost:44354/todos/graphql';\nconst uri = 'https://localhost:44354/todos/graphql'; // <-- add the URL of the GraphQL server here\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n\n\n  // Create an http link:\n  const http = httpLink.create({\n    uri: `https://${Host}`,\n  });\n\n  // Create a WebSocket link:\n  const ws = new GraphQLWsLink(\n    createClient({\n      url: `wss://${Host}`\n    }),\n  );\n\n  // using the ability to split links, you can send data to each link\n  // depending on what kind of operation is being sent\n  const link = split(\n    // split based on operation type\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n    },\n    ws,\n    http,\n  )\n  return {\n    link,\n    cache: new InMemoryCache(),\n    defaultOptions: _defaultOptions\n  };\n}\n\n@NgModule({\n  exports: [ApolloModule],\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule { }\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,YAAY,QAAQ,gBAAgB;AAC7D,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,SAA8CC,aAAa,EAAEC,KAAK,QAAQ,qBAAqB;AAC/F,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,iBAAiB,QAAQ,0BAA0B;;AAE5D,MAAMC,eAAe,GAAmB;EACtCC,UAAU,EAAE;IACVC,WAAW,EAAE,UAAU;IACvBC,WAAW,EAAE;GACd;EACDC,KAAK,EAAE;IACLF,WAAW,EAAE,UAAU;IACvBC,WAAW,EAAE;;CAEhB;AAED,MAAME,IAAI,GAAG,+BAA+B;AAC5C,MAAMC,GAAG,GAAG,uCAAuC,CAAC,CAAC;AACrD,OAAM,SAAUC,YAAYA,CAACC,QAAkB;EAG7C;EACA,MAAMC,IAAI,GAAGD,QAAQ,CAACE,MAAM,CAAC;IAC3BJ,GAAG,EAAE,WAAWD,IAAI;GACrB,CAAC;EAEF;EACA,MAAMM,EAAE,GAAG,IAAId,aAAa,CAC1BC,YAAY,CAAC;IACXc,GAAG,EAAE,SAASP,IAAI;GACnB,CAAC,CACH;EAED;EACA;EACA,MAAMQ,IAAI,GAAGjB,KAAK;EAChB;EACA,CAAC;IAAEQ;EAAK,CAAE,KAAI;IACZ,MAAMU,UAAU,GAAGf,iBAAiB,CAACK,KAAK,CAAC;IAC3C,OAAOU,UAAU,CAACC,IAAI,KAAK,qBAAqB,IAAID,UAAU,CAACE,SAAS,KAAK,cAAc;EAC7F,CAAC,EACDL,EAAE,EACFF,IAAI,CACL;EACD,OAAO;IACLI,IAAI;IACJI,KAAK,EAAE,IAAItB,aAAa,EAAE;IAC1BuB,cAAc,EAAElB;GACjB;AACH;AAYA,OAAM,MAAOmB,aAAa;SAAbA,aAAa;;mBAAbA,MAAa;AAAA;;QAAbA;AAAa;;aARb,CACT;IACEC,OAAO,EAAE5B,cAAc;IACvB6B,UAAU,EAAEd,YAAY;IACxBe,IAAI,EAAE,CAAC5B,QAAQ;GAChB,CACF;EAAA6B,OAAA,GAPS9B,YAAY;AAAA;;2EASX0B,aAAa;IAAAK,OAAA,GATd/B,YAAY;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}