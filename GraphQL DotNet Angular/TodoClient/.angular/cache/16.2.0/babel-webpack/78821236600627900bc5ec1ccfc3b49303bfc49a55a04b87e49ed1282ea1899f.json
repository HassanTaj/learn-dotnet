{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from '../globals/index.js';\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw newInvariantError(68, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : '');\n    }\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(fragments.length === 1, 69, fragments.length);\n    actualFragmentName = fragments[0].name.value;\n  }\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions, true)\n  });\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread':\n      {\n        var fragmentName = selection.name.value;\n        if (typeof fragmentMap === \"function\") {\n          return fragmentMap(fragmentName);\n        }\n        var fragment = fragmentMap && fragmentMap[fragmentName];\n        invariant(fragment, 70, fragmentName);\n        return fragment || null;\n      }\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["__assign","__spreadArray","invariant","newInvariantError","getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","operation","name","concat","value","push","length","query","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"sources":["D:/Repos/learn-dotnet/GraphQL_Angular_Subscriptions_V7_6_0/TodoClient/node_modules/@apollo/client/utilities/graphql/fragments.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, newInvariantError } from '../globals/index.js';\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw newInvariantError(\n                68,\n                definition.operation,\n                definition.name ? \" named '\".concat(definition.name.value, \"'\") : ''\n            );\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        invariant(fragments.length === 1, 69, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case 'InlineFragment':\n            return selection;\n        case 'FragmentSpread': {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            invariant(fragment, 70, fragmentName);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,aAAa,QAAQ,OAAO;AAC/C,SAASC,SAAS,EAAEC,iBAAiB,QAAQ,qBAAqB;AAClE,OAAO,SAASC,wBAAwBA,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAC7D,IAAIC,kBAAkB,GAAGD,YAAY;EACrC,IAAIE,SAAS,GAAG,EAAE;EAClBH,QAAQ,CAACI,WAAW,CAACC,OAAO,CAAC,UAAUC,UAAU,EAAE;IAC/C,IAAIA,UAAU,CAACC,IAAI,KAAK,qBAAqB,EAAE;MAC3C,MAAMT,iBAAiB,CACnB,EAAE,EACFQ,UAAU,CAACE,SAAS,EACpBF,UAAU,CAACG,IAAI,GAAG,UAAU,CAACC,MAAM,CAACJ,UAAU,CAACG,IAAI,CAACE,KAAK,EAAE,GAAG,CAAC,GAAG,EACtE,CAAC;IACL;IACA,IAAIL,UAAU,CAACC,IAAI,KAAK,oBAAoB,EAAE;MAC1CJ,SAAS,CAACS,IAAI,CAACN,UAAU,CAAC;IAC9B;EACJ,CAAC,CAAC;EACF,IAAI,OAAOJ,kBAAkB,KAAK,WAAW,EAAE;IAC3CL,SAAS,CAACM,SAAS,CAACU,MAAM,KAAK,CAAC,EAAE,EAAE,EAAEV,SAAS,CAACU,MAAM,CAAC;IACvDX,kBAAkB,GAAGC,SAAS,CAAC,CAAC,CAAC,CAACM,IAAI,CAACE,KAAK;EAChD;EACA,IAAIG,KAAK,GAAGnB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEK,QAAQ,CAAC,EAAE;IAAEI,WAAW,EAAER,aAAa,CAAC,CAClE;MACIW,IAAI,EAAE,qBAAqB;MAC3BC,SAAS,EAAE,OAAO;MAClBO,YAAY,EAAE;QACVR,IAAI,EAAE,cAAc;QACpBS,UAAU,EAAE,CACR;UACIT,IAAI,EAAE,gBAAgB;UACtBE,IAAI,EAAE;YACFF,IAAI,EAAE,MAAM;YACZI,KAAK,EAAET;UACX;QACJ,CAAC;MAET;IACJ,CAAC,CACJ,EAAEF,QAAQ,CAACI,WAAW,EAAE,IAAI;EAAE,CAAC,CAAC;EACrC,OAAOU,KAAK;AAChB;AACA,OAAO,SAASG,iBAAiBA,CAACd,SAAS,EAAE;EACzC,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;IAAEA,SAAS,GAAG,EAAE;EAAE;EAC5C,IAAIe,QAAQ,GAAG,CAAC,CAAC;EACjBf,SAAS,CAACE,OAAO,CAAC,UAAUc,QAAQ,EAAE;IAClCD,QAAQ,CAACC,QAAQ,CAACV,IAAI,CAACE,KAAK,CAAC,GAAGQ,QAAQ;EAC5C,CAAC,CAAC;EACF,OAAOD,QAAQ;AACnB;AACA,OAAO,SAASE,wBAAwBA,CAACC,SAAS,EAAEC,WAAW,EAAE;EAC7D,QAAQD,SAAS,CAACd,IAAI;IAClB,KAAK,gBAAgB;MACjB,OAAOc,SAAS;IACpB,KAAK,gBAAgB;MAAE;QACnB,IAAIpB,YAAY,GAAGoB,SAAS,CAACZ,IAAI,CAACE,KAAK;QACvC,IAAI,OAAOW,WAAW,KAAK,UAAU,EAAE;UACnC,OAAOA,WAAW,CAACrB,YAAY,CAAC;QACpC;QACA,IAAIkB,QAAQ,GAAGG,WAAW,IAAIA,WAAW,CAACrB,YAAY,CAAC;QACvDJ,SAAS,CAACsB,QAAQ,EAAE,EAAE,EAAElB,YAAY,CAAC;QACrC,OAAOkB,QAAQ,IAAI,IAAI;MAC3B;IACA;MACI,OAAO,IAAI;EACnB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}